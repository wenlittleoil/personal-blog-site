[warn]--{"name":"create_blog","desc":"someone is creating blog","data":{"uid":1,"title":"test11111111","content":"对于路线 1, 适合大多数普通韭菜, 如果你从小运气特别好, 然后又不大爱学习, 我建议你选 1, 不过从风险的角度讲, 路线 1 的成功可能性和时间成反比, 基本上能赌中都是在头 5年, 后 5年概率很低了. 所以要随时做好转行准备, 时刻关注外卖行情, 必要的话最好学一门不受年龄影响的副手技能对于路线 2, 就一个字, 攒钱, 只要头 10年你能不被自己看似顺风顺水的生涯冲昏头脑, 攒住这些年赚的钱, 后半生可以无忧, 副手技能主点理财金融投资类, 以培养财商为主, 或者考虑实业对于路线 3, 我想说挺艰难的, 如果你是路线 3, 一个是尽可能攒钱, 另外副手技能最好以写作, 演讲为主, 后期可以走培训, 自媒体路线, 一般路线 3 的人经历都比较丰富, 也擅长讲故事, 或者点管理技能, 走管理路线延长职业生涯, 然后转投资和实业.总的来说在韭菜期, 主要是认清自己是棵韭菜, 然后深刻认识自己是棵啥韭菜, 然后选一条路线尽量让自己的韭菜生涯获得回报最大化著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。对于路线 1, 适合大多数普通韭菜, 如果你从小运气特别好, 然后又不大爱学习, 我建议你选 1, 不过从风险的角度讲, 路线 1 的成功可能性和时间成反比, 基本上能赌中都是在头 5年, 后 5年概率很低了. 所以要随时做好转行准备, 时刻关注外卖行情, 必要的话最好学一门不受年龄影响的副手技能对于路线 2, 就一个字, 攒钱, 只要头 10年你能不被自己看似顺风顺水的生涯冲昏头脑, 攒住这些年赚的钱, 后半生可以无忧, 副手技能主点理财金融投资类, 以培养财商为主, 或者考虑实业对于路线 3, 我想说挺艰难的, 如果你是路线 3, 一个是尽可能攒钱, 另外副手技能最好以写作, 演讲为主, 后期可以走培训, 自媒体路线, 一般路线 3 的人经历都比较丰富, 也擅长讲故事, 或者点管理技能, 走管理路线延长职业生涯, 然后转投资和实业.总的来说在韭菜期, 主要是认清自己是棵韭菜, 然后深刻认识自己是棵啥韭菜, 然后选一条路线尽量让自己的韭菜生涯获得回报最大化著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处"}}--[2020-06-13 10:45:22]
[warn]--{"name":"create_blog","desc":"someone is creating blog","data":{"uid":1,"title":"test111111","content":"其次是快速总结, 这里我不仅要反问新鲜的韭菜们, 你们觉得面试考算法是在考察什么呢, 我看不少人说考察思维, 看聪不聪明, 反应速度等等, 但我认为, 算法又不是脑筋急转弯, 看临场发挥, 编程能力是一个刻意练习的结果, 所以你哪怕很聪明, 但是你觉得你练一周算法能和一个比你笨的人练1年达到相同水准么? 反正我觉得不太可能, 你要行, 那我也认了, 封你个韭菜战斗机的称号好了 😀\n其实算法考察的是你对数据结构的掌握和逻辑思考能力, 我发现现在很多韭菜硬是把算法面经, 算法面试, 算法学习搞成了应试教育, 颇有一种高考题海战术的意思, 当工程师是一个实践性行业, 我们学习算法的目的不是为了去考试 \n学习算法的目的是为了掌握数据结构和具备高效处理数据的能力, 但这和你实际解决工程或者业务问题的能力并不直接关联, 但是他间接的影响你的逻辑思考能力和处理问题的效率.\n我理解没有算法基础和有算法基础的程序员最大的区别不是寻求所谓的最优解, 而是在面对实际的工程和业务问题时, 不懂算法的人他的思考基础不是基于数据结构的, 而是基于语言逻辑, 举个例子 JS 中常用的就是数组和对象这两种数据结构, 如果你不懂算法, 自然也不会掌握基础的数据结构, 于是在编程和处理问题上都是以数组操作和对象操作来完成的, 你分解业务问题分解工程问题最终都会映射到 JS 的数组和对象上, 当问题复杂化的时候, 你缺乏更多的工具去应对, 这里的工具就是数据结构和算法, 最经典的就是个树形菜单, 光靠数组和对象, 写出来的代码肯定惨不忍睹呀, 同时在面对一些技术问题时你的思路也会受限, 因为你只知道数组和对象, 而具有算法基础的人, 他就会考虑使用树去解决问题, 算法减少了思考成本, 缩短了思考路径, 自然也提升了解决问题的效率.\n就好比不懂建筑设计的水泥工也能盖大楼, 但是肯定没法盖超级大楼, 所以不懂算法的前端开发能开发项目, 但是一定无法应对极大型项目. 也无法适应时代对技术的要求和变化\n来源：掘金\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"}}--[2020-06-13 10:52:11]
[warn]--{"name":"create_blog","desc":"someone is creating blog","data":{"uid":1,"title":"test111111","content":"其次是快速总结, 这里我不仅要反问新鲜的韭菜们, 你们觉得面试考算法是在考察什么呢, 我看不少人说考察思维, 看聪不聪明, 反应速度等等, 但我认为, 算法又不是脑筋急转弯, 看临场发挥, 编程能力是一个刻意练习的结果, 所以你哪怕很聪明, 但是你觉得你练一周算法能和一个比你笨的人练1年达到相同水准么? 反正我觉得不太可能, 你要行, 那我也认了, 封你个韭菜战斗机的称号好了 😀\n其实算法考察的是你对数据结构的掌握和逻辑思考能力, 我发现现在很多韭菜硬是把算法面经, 算法面试, 算法学习搞成了应试教育, 颇有一种高考题海战术的意思, 当工程师是一个实践性行业, 我们学习算法的目的不是为了去考试 \n学习算法的目的是为了掌握数据结构和具备高效处理数据的能力, 但这和你实际解决工程或者业务问题的能力并不直接关联, 但是他间接的影响你的逻辑思考能力和处理问题的效率.\n我理解没有算法基础和有算法基础的程序员最大的区别不是寻求所谓的最优解, 而是在面对实际的工程和业务问题时, 不懂算法的人他的思考基础不是基于数据结构的, 而是基于语言逻辑, 举个例子 JS 中常用的就是数组和对象这两种数据结构, 如果你不懂算法, 自然也不会掌握基础的数据结构, 于是在编程和处理问题上都是以数组操作和对象操作来完成的, 你分解业务问题分解工程问题最终都会映射到 JS 的数组和对象上, 当问题复杂化的时候, 你缺乏更多的工具去应对, 这里的工具就是数据结构和算法, 最经典的就是个树形菜单, 光靠数组和对象, 写出来的代码肯定惨不忍睹呀, 同时在面对一些技术问题时你的思路也会受限, 因为你只知道数组和对象, 而具有算法基础的人, 他就会考虑使用树去解决问题, 算法减少了思考成本, 缩短了思考路径, 自然也提升了解决问题的效率.\n就好比不懂建筑设计的水泥工也能盖大楼, 但是肯定没法盖超级大楼, 所以不懂算法的前端开发能开发项目, 但是一定无法应对极大型项目. 也无法适应时代对技术的要求和变化\n来源：掘金\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"}}--[2020-06-13 10:57:06]
[warn]--{"name":"create_blog","desc":"someone is creating blog","data":{"uid":1,"title":"test111111","content":"其次是快速总结, 这里我不仅要反问新鲜的韭菜们, 你们觉得面试考算法是在考察什么呢, 我看不少人说考察思维, 看聪不聪明, 反应速度等等, 但我认为, 算法又不是脑筋急转弯, 看临场发挥, 编程能力是一个刻意练习的结果, 所以你哪怕很聪明, 但是你觉得你练一周算法能和一个比你笨的人练1年达到相同水准么? 反正我觉得不太可能, 你要行, 那我也认了, 封你个韭菜战斗机的称号好了 😀\n其实算法考察的是你对数据结构的掌握和逻辑思考能力, 我发现现在很多韭菜硬是把算法面经, 算法面试, 算法学习搞成了应试教育, 颇有一种高考题海战术的意思, 当工程师是一个实践性行业, 我们学习算法的目的不是为了去考试 \n学习算法的目的是为了掌握数据结构和具备高效处理数据的能力, 但这和你实际解决工程或者业务问题的能力并不直接关联, 但是他间接的影响你的逻辑思考能力和处理问题的效率.\n我理解没有算法基础和有算法基础的程序员最大的区别不是寻求所谓的最优解, 而是在面对实际的工程和业务问题时, 不懂算法的人他的思考基础不是基于数据结构的, 而是基于语言逻辑, 举个例子 JS 中常用的就是数组和对象这两种数据结构, 如果你不懂算法, 自然也不会掌握基础的数据结构, 于是在编程和处理问题上都是以数组操作和对象操作来完成的, 你分解业务问题分解工程问题最终都会映射到 JS 的数组和对象上, 当问题复杂化的时候, 你缺乏更多的工具去应对, 这里的工具就是数据结构和算法, 最经典的就是个树形菜单, 光靠数组和对象, 写出来的代码肯定惨不忍睹呀, 同时在面对一些技术问题时你的思路也会受限, 因为你只知道数组和对象, 而具有算法基础的人, 他就会考虑使用树去解决问题, 算法减少了思考成本, 缩短了思考路径, 自然也提升了解决问题的效率.\n就好比不懂建筑设计的水泥工也能盖大楼, 但是肯定没法盖超级大楼, 所以不懂算法的前端开发能开发项目, 但是一定无法应对极大型项目. 也无法适应时代对技术的要求和变化\n来源：掘金\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"}}--[2020-06-13 10:58:17]
[warn]--{"name":"create_blog","desc":"someone is creating blog","data":{"uid":1,"title":"test111111","content":"其次是快速总结, 这里我不仅要反问新鲜的韭菜们, 你们觉得面试考算法是在考察什么呢, 我看不少人说考察思维, 看聪不聪明, 反应速度等等, 但我认为, 算法又不是脑筋急转弯, 看临场发挥, 编程能力是一个刻意练习的结果其次是快速总结, 这里我不仅要反问新鲜的韭菜们, 你们觉得面试考算法是在考察什么呢, 我看不少人说考察思维, 看聪不聪明, 反应速度等等, 但我认为, 算法又不是脑筋急转弯, 看临场发挥, 编程能力是一个刻意练习的结果其次是快速总结, 这里我不仅要反问新鲜的韭菜们, 你们觉得面试考算法是在考察什么呢, 我看不少人说考察思维, 看聪不聪明, 反应速度等等, 但我认为, 算法又不是脑筋急转弯, 看临场发挥, 编程能力是一个刻意练习的结果其次是快速总结, 这里我不仅要反问新鲜的韭菜们, 你们觉得面试考算法是在考察什么呢, 我看不少人说考察思维, 看聪不聪明, 反应速度等等, 但我认为, 算法又不是脑筋急转弯, 看临场发挥, 编程能力是一个刻意练习的结果其次是快速总结, 这里我不仅要反问新鲜的韭菜们, 你们觉得面试考算法是在考察什么呢, 我看不少人说考察思维, 看聪不聪明, 反应速度等等, 但我认为, 算法又不是脑筋急转弯, 看临场发挥, 编程能力是一个刻意练习的结果其次是快速总结, 这里我不仅要反问新鲜的韭菜们, 你们觉得面试考算法是在考察什么呢, 我看不少人说考察思维, 看聪不聪明, 反应速度等等, 但我认为, 算法又不是脑筋急转弯, 看临场发挥, 编程能力是一个刻意练习的结果其次是快速总结, 这里我不仅要反问新鲜的韭菜们, 你们觉得面试考算法是在考察什么呢, 我看不少人说考察思维, 看聪不聪明, 反应速度等等, 但我认为, 算法又不是脑筋急转弯, 看临场发挥, 编程能力是一个刻意练习的结果"}}--[2020-06-13 10:59:16]
[warn]--{"name":"create_blog","desc":"someone is creating blog","data":{"uid":1,"title":"test222222","content":"其次是快速总结, 这里我不仅要反问新鲜的韭菜们, 你们觉得面试考算法是在考察什么呢, 我看不少人说考察思维, 看聪不聪明, 反应速度等等, 但我认为, 算法又不是脑筋急转弯, 看临场发挥, 编程能力是一个刻意练习的结果其次是快速总结, 这里我不仅要反问新鲜的韭菜们, 你们觉得面试考算法是在考察什么呢, 我看不少人说考察思维, 看聪不聪明, 反应速度等等, 但我认为, 算法又不是脑筋急转弯, 看临场发挥, 编程能力是一个刻意练习的结果其次是快速总结, 这里我不仅要反问新鲜的韭菜们, 你们觉得面试考算法是在考察什么呢, 我看不少人说考察思维, 看聪不聪明, 反应速度等等, 但我认为, 算法又不是脑筋急转弯, 看临场发挥, 编程能力是一个刻意练习的结果其次是快速总结, 这里我不仅要反问新鲜的韭菜们, 你们觉得面试考算法是在考察什么呢, 我看不少人说考察思维, 看聪不聪明, 反应速度等等, 但我认为, 算法又不是脑筋急转弯, 看临场发挥, 编程能力是一个刻意练习的结果其次是快速总结, 这里我不仅要反问新鲜的韭菜们, 你们觉得面试考算法是在考察什么呢, 我看不少人说考察思维, 看聪不聪明, 反应速度等等, 但我认为, 算法又不是脑筋急转弯, 看临场发挥, 编程能力是一个刻意练习的结果其次是快速总结, 这里我不仅要反问新鲜的韭菜们, 你们觉得面试考算法是在考察什么呢, 我看不少人说考察思维, 看聪不聪明, 反应速度等等, 但我认为, 算法又不是脑筋急转弯, 看临场发挥, 编程能力是一个刻意练习的结果其次是快速总结, 这里我不仅要反问新鲜的韭菜们, 你们觉得面试考算法是在考察什么呢, 我看不少人说考察思维, 看聪不聪明, 反应速度等等, 但我认为, 算法又不是脑筋急转弯, 看临场发挥, 编程能力是一个刻意练习的结果"}}--[2020-06-13 11:15:34]
[warn]--{"name":"create_blog","desc":"someone is creating blog","data":{"uid":1,"title":"test33333333","content":"其次是快速总结, 这里我不仅要反问新鲜的韭菜们, 你们觉得面试考算法是在考察什么呢, 我看不少人说考察思维, 看聪不聪明, 反应速度等等, 但我认为, 算法又不是脑筋急转弯, 看临场发挥, 编程能力是一个刻意练习的结果其次是快速总结, 这里我不仅要反问新鲜的韭菜们, 你们觉得面试考算法是在考察什么呢, 我看不少人说考察思维, 看聪不聪明, 反应速度等等, 但我认为, 算法又不是脑筋急转弯, 看临场发挥, 编程能力是一个刻意练习的结果其次是快速总结, 这里我不仅要反问新鲜的韭菜们, 你们觉得面试考算法是在考察什么呢, 我看不少人说考察思维, 看聪不聪明, 反应速度等等, 但我认为, 算法又不是脑筋急转弯, 看临场发挥, 编程能力是一个刻意练习的结果其次是快速总结, 这里我不仅要反问新鲜的韭菜们, 你们觉得面试考算法是在考察什么呢, 我看不少人说考察思维, 看聪不聪明, 反应速度等等, 但我认为, 算法又不是脑筋急转弯, 看临场发挥, 编程能力是一个刻意练习的结果其次是快速总结, 这里我不仅要反问新鲜的韭菜们, 你们觉得面试考算法是在考察什么呢, 我看不少人说考察思维, 看聪不聪明, 反应速度等等, 但我认为, 算法又不是脑筋急转弯, 看临场发挥, 编程能力是一个刻意练习的结果其次是快速总结, 这里我不仅要反问新鲜的韭菜们, 你们觉得面试考算法是在考察什么呢, 我看不少人说考察思维, 看聪不聪明, 反应速度等等, 但我认为, 算法又不是脑筋急转弯, 看临场发挥, 编程能力是一个刻意练习的结果其次是快速总结, 这里我不仅要反问新鲜的韭菜们, 你们觉得面试考算法是在考察什么呢, 我看不少人说考察思维, 看聪不聪明, 反应速度等等, 但我认为, 算法又不是脑筋急转弯, 看临场发挥, 编程能力是一个刻意练习的结果"}}--[2020-06-13 11:18:13]
[warn]--{"name":"create_blog","desc":"someone is creating blog","data":{"uid":1,"title":"test","content":"我理解没有算法基础和有算法基础的程序员最大的区别不是寻求所谓的最优解, 而是在面对实际的工程和业务问题时, 不懂算法的人他的思考基础不是基于数据结构的, 而是基于语言逻辑, 举个例子 JS 中常用的就是数组和对象这两种数据结构, 如果你不懂算法, 自然也不会掌握基础的数据结构, 于是在编程和处理问题上都是以数组操作和对象操作来完成的, 你分解业务问题分解工程问题最终都会映射到 JS 的数组和对象上, 当问题复杂化的时候, 你缺乏更多的工具去应对, 这里的工具就是数据结构和算法, 最经典的就是个树形菜单, 光靠数组和对象, 写出来的代码肯定惨不忍睹呀, 同时在面对一些技术问题时你的思路也会受限, 因为你只知道数组和对象, 而具有算法基础的人, 他就会考虑使用树去解决问题, 算法减少了思考成本, 缩短了思考路径, 自然也提升了解决问题的效率我理解没有算法基础和有算法基础的程序员最大的区别不是寻求所谓的最优解, 而是在面对实际的工程和业务问题时, 不懂算法的人他的思考基础不是基于数据结构的, 而是基于语言逻辑, 举个例子 JS 中常用的就是数组和对象这两种数据结构, 如果你不懂算法, 自然也不会掌握基础的数据结构, 于是在编程和处理问题上都是以数组操作和对象操作来完成的, 你分解业务问题分解工程问题最终都会映射到 JS 的数组和对象上, 当问题复杂化的时候, 你缺乏更多的工具去应对, 这里的工具就是数据结构和算法, 最经典的就是个树形菜单, 光靠数组和对象, 写出来的代码肯定惨不忍睹呀, 同时在面对一些技术问题时你的思路也会受限, 因为你只知道数组和对象, 而具有算法基础的人, 他就会考虑使用树去解决问题, 算法减少了思考成本, 缩短了思考路径, 自然也提升了解决问题的效率我理解没有算法基础和有算法基础的程序员最大的区别不是寻求所谓的最优解, 而是在面对实际的工程和业务问题时, 不懂算法的人他的思考基础不是基于数据结构的, 而是基于语言逻辑, 举个例子 JS 中常用的就是数组和对象这两种数据结构, 如果你不懂算法, 自然也不会掌握基础的数据结构, 于是在编程和处理问题上都是以数组操作和对象操作来完成的, 你分解业务问题分解工程问题最终都会映射到 JS 的数组和对象上, 当问题复杂化的时候, 你缺乏更多的工具去应对, 这里的工具就是数据结构和算法, 最经典的就是个树形菜单, 光靠数组和对象, 写出来的代码肯定惨不忍睹呀, 同时在面对一些技术问题时你的思路也会受限, 因为你只知道数组和对象, 而具有算法基础的人, 他就会考虑使用树去解决问题, 算法减少了思考成本, 缩短了思考路径, 自然也提升了解决问题的效率我理解没有算法基础和有算法基础的程序员最大的区别不是寻求所谓的最优解, 而是在面对实际的工程和业务问题时, 不懂算法的人他的思考基础不是基于数据结构的, 而是基于语言逻辑, 举个例子 JS 中常用的就是数组和对象这两种数据结构, 如果你不懂算法, 自然也不会掌握基础的数据结构, 于是在编程和处理问题上都是以数组操作和对象操作来完成的, 你分解业务问题分解工程问题最终都会映射到 JS 的数组和对象上, 当问题复杂化的时候, 你缺乏更多的工具去应对, 这里的工具就是数据结构和算法, 最经典的就是个树形菜单, 光靠数组和对象, 写出来的代码肯定惨不忍睹呀, 同时在面对一些技术问题时你的思路也会受限, 因为你只知道数组和对象, 而具有算法基础的人, 他就会考虑使用树去解决问题, 算法减少了思考成本, 缩短了思考路径, 自然也提升了解决问题的效率我理解没有算法基础和有算法基础的程序员最大的区别不是寻求所谓的最优解, 而是在面对实际的工程和业务问题时, 不懂算法的人他的思考基础不是基于数据结构的, 而是基于语言逻辑, 举个例子 JS 中常用的就是数组和对象这两种数据结构, 如果你不懂算法, 自然也不会掌握基础的数据结构, 于是在编程和处理问题上都是以数组操作和对象操作来完成的, 你分解业务问题分解工程问题最终都会映射到 JS 的数组和对象上, 当问题复杂化的时候, 你缺乏更多的工具去应对, 这里的工具就是数据结构和算法, 最经典的就是个树形菜单, 光靠数组和对象, 写出来的代码肯定惨不忍睹呀, 同时在面对一些技术问题时你的思路也会受限, 因为你只知道数组和对象, 而具有算法基础的人, 他就会考虑使用树去解决问题, 算法减少了思考成本, 缩短了思考路径, 自然也提升了解决问题的效率我理解没有算法基础和有算法基础的程序员最大的区别不是寻求所谓的最优解, 而是在面对实际的工程和业务问题时, 不懂算法的人他的思考基础不是基于数据结构的, 而是基于语言逻辑, 举个例子 JS 中常用的就是数组和对象这两种数据结构, 如果你不懂算法, 自然也不会掌握基础的数据结构, 于是在编程和处理问题上都是以数组操作和对象操作来完成的, 你分解业务问题分解工程问题最终都会映射到 JS 的数组和对象上, 当问题复杂化的时候, 你缺乏更多的工具去应对, 这里的工具就是数据结构和算法, 最经典的就是个树形菜单, 光靠数组和对象, 写出来的代码肯定惨不忍睹呀, 同时在面对一些技术问题时你的思路也会受限, 因为你只知道数组和对象, 而具有算法基础的人, 他就会考虑使用树去解决问题, 算法减少了思考成本, 缩短了思考路径, 自然也提升了解决问题的效率"}}--[2020-06-13 11:21:45]
[warn]--{"name":"create_blog","desc":"someone is creating blog","data":{"uid":1,"title":"test","content":"我理解没有算法基础和有算法基础的程序员最大的区别不是寻求所谓的最优解, 而是在面对实际的工程和业务问题时, 不懂算法的人他的思考基础不是基于数据结构的, 而是基于语言逻辑, 举个例子 JS 中常用的就是数组和对象这两种数据结构, 如果你不懂算法, 自然也不会掌握基础的数据结构, 于是在编程和处理问题上都是以数组操作和对象操作来完成的, 你分解业务问题分解工程问题最终都会映射到 JS 的数组和对象上, 当问题复杂化的时候, 你缺乏更多的工具去应对, 这里的工具就是数据结构和算法, 最经典的就是个树形菜单, 光靠数组和对象, 写出来的代码肯定惨不忍睹呀, 同时在面对一些技术问题时你的思路也会受限, 因为你只知道数组和对象, 而具有算法基础的人, 他就会考虑使用树去解决问题, 算法减少了思考成本, 缩短了思考路径, 自然也提升了解决问题的效率我理解没有算法基础和有算法基础的程序员最大的区别不是寻求所谓的最优解, 而是在面对实际的工程和业务问题时, 不懂算法的人他的思考基础不是基于数据结构的, 而是基于语言逻辑, 举个例子 JS 中常用的就是数组和对象这两种数据结构, 如果你不懂算法, 自然也不会掌握基础的数据结构, 于是在编程和处理问题上都是以数组操作和对象操作来完成的, 你分解业务问题分解工程问题最终都会映射到 JS 的数组和对象上, 当问题复杂化的时候, 你缺乏更多的工具去应对, 这里的工具就是数据结构和算法, 最经典的就是个树形菜单, 光靠数组和对象, 写出来的代码肯定惨不忍睹呀, 同时在面对一些技术问题时你的思路也会受限, 因为你只知道数组和对象, 而具有算法基础的人, 他就会考虑使用树去解决问题, 算法减少了思考成本, 缩短了思考路径, 自然也提升了解决问题的效率我理解没有算法基础和有算法基础的程序员最大的区别不是寻求所谓的最优解, 而是在面对实际的工程和业务问题时, 不懂算法的人他的思考基础不是基于数据结构的, 而是基于语言逻辑, 举个例子 JS 中常用的就是数组和对象这两种数据结构, 如果你不懂算法, 自然也不会掌握基础的数据结构, 于是在编程和处理问题上都是以数组操作和对象操作来完成的, 你分解业务问题分解工程问题最终都会映射到 JS 的数组和对象上, 当问题复杂化的时候, 你缺乏更多的工具去应对, 这里的工具就是数据结构和算法, 最经典的就是个树形菜单, 光靠数组和对象, 写出来的代码肯定惨不忍睹呀, 同时在面对一些技术问题时你的思路也会受限, 因为你只知道数组和对象, 而具有算法基础的人, 他就会考虑使用树去解决问题, 算法减少了思考成本, 缩短了思考路径, 自然也提升了解决问题的效率我理解没有算法基础和有算法基础的程序员最大的区别不是寻求所谓的最优解, 而是在面对实际的工程和业务问题时, 不懂算法的人他的思考基础不是基于数据结构的, 而是基于语言逻辑, 举个例子 JS 中常用的就是数组和对象这两种数据结构, 如果你不懂算法, 自然也不会掌握基础的数据结构, 于是在编程和处理问题上都是以数组操作和对象操作来完成的, 你分"}}--[2020-06-13 11:24:28]
[warn]--{"name":"create_blog","desc":"someone is creating blog","data":{"uid":1,"title":"test","content":"我理解没有算法基础和有算法基础的程序员最大的区别不是寻求所谓的最优解, 而是在面对实际的工程和业务问题时, 不懂算法的人他的思考基础不是基于数据结构的, 而是基于语言逻辑, 举个例子 JS 中常用的就是数组和对象这两种数据结构, 如果你不懂算法, 自然也不会掌握基础的数据结构, 于是在编程和处理问题上都是以数组操作和对象操作来完成的, 你分解业务问题分解工程问题最终都会映射到 JS 的数组和对象上, 当问题复杂化的时候, 你缺乏更多的工具去应对, 这里的工具就是数据结构和算法, 最经典的就是个树形菜单, 光靠数组和对象, 写出来的代码肯定惨不忍睹呀, 同时在面对一些技术问题时你的思路也会受限, 因为你只知道数组和对象, 而具有算法基础的人, 他就会考虑使用树去解决问题, 算法减少了思考成本, 缩短了思考路径, 自然也提升了解决问题的效率我理解没有算法基础和有算法基础的程序员最大的区别不是寻求所谓的最优解, 而是在面对实际的工程和业务问题时, 不懂算法的人他的思考基础不是基于数据结构的, 而是基于语言逻辑, 举个例子 JS 中常用的就是数组和对象这两种数据结构, 如果你不懂算法, 自然也不会掌握基础的数据结构, 于是在编程和处理问题上都是以数组操作和对象操作来完成的, 你分解业务问题分解工程问题最终都会映射到 JS 的数组和对象上, 当问题复杂化的时候, 你缺乏更多的工具去应对, 这里的工具就是数据结构和算法, 最经典的就是个树形菜单, 光靠数组和对象, 写出来的代码肯定惨不忍睹呀, 同时在面对一些技术问题时你的思路也会受限, 因为你只知道数组和对象, 而具有算法基础的人, 他就会考虑使用树去解决问题, 算法减少了思考成本, 缩短了思考路径, 自然也提升了解决问题的效率我理解没有算法基础和有算法基础的程序员最大的区别不是寻求所谓的最优解, 而是在面对实际的工程和业务问题时, 不懂算法的人他的思考基础不是基于数据结构的, 而是基于语言逻辑, 举个例子 JS 中常用的就是数组和对象这两种数据结构, 如果你不懂算法, 自然也不会掌握基础的数据结构, 于是在编程和处理问题上都是以数组操作和对象操作来完成的, 你分解业务问题分解工程问题最终都会映射到 JS 的数组和对象上, 当问题复杂化的时候, 你缺乏更多的工具去应对, 这里的工具就是数据结构和算法, 最经典的就是个树形菜单, 光靠数组和对象, 写出来的代码肯定惨不忍睹呀, 同时在面对一些技术问题时你的思路也会受限, 因为你只知道数组和对象, 而具有算法基础的人, 他就会考虑使用树去解决问题, 算法减少了思考成本, 缩短了思考路径, 自然也提升了解决问题的效率我理解没有算法基础和有算法基础的程序员最大的区别不是寻求所谓的最优解, 而是在面对实际的工程和业务问题时, 不懂算法的人他的思考基础不是基于数据结构的, 而是基于语言逻辑, 举个例子 JS 中常用的就是数组和对象这两种数据结构, 如果你不懂算法, 自然也不会掌握基础的数据结构, 于是在编程和处理问题上都是以数组操作和对象操作来完成的, 你分"}}--[2020-06-13 11:31:45]
[warn]--{"name":"create_blog","desc":"someone is creating blog","data":{"uid":1,"title":"test","content":"我理解没有算法基础和有算法基础的程序员最大的区别不是寻求所谓的最优解, 而是在面对实际的工程和业务问题时, 不懂算法的人他的思考基础不是基于数据结构的, 而是基于语言逻辑, 举个例子 JS 中常用的就是数组和对象这两种数据结构, 如果你不懂算法, 自然也不会掌握基础的数据结构, 于是在编程和处理问题上都是以数组操作和对象操作来完成的, 你分解业务问题分解工程问题最终都会映射到 JS 的数组和对象上, 当问题复杂化的时候, 你缺乏更多的工具去应对, 这里的工具就是数据结构和算法, 最经典的就是个树形菜单, 光靠数组和对象, 写出来的代码肯定惨不忍睹呀, 同时在面对一些技术问题时你的思路也会受限, 因为你只知道数组和对象, 而具有算法基础的人, 他就会考虑使用树去解决问题, 算法减少了思考成本, 缩短了思考路径, 自然也提升了解决问题的效率我理解没有算法基础和有算法基础的程序员最大的区别不是寻求所谓的最优解, 而是在面对实际的工程和业务问题时, 不懂算法的人他的思考基础不是基于数据结构的, 而是基于语言逻辑, 举个例子 JS 中常用的就是数组和对象这两种数据结构, 如果你不懂算法, 自然也不会掌握基础的数据结构, 于是在编程和处理问题上都是以数组操作和对象操作来完成的, 你分解业务问题分解工程问题最终都会映射到 JS 的数组和对象上, 当问题复杂化的时候, 你缺乏更多的工具去应对, 这里的工具就是数据结构和算法, 最经典的就是个树形菜单, 光靠数组和对象, 写出来的代码肯定惨不忍睹呀, 同时在面对一些技术问题时你的思路也会受限, 因为你只知道数组和对象, 而具有算法基础的人, 他就会考虑使用树去解决问题, 算法减少了思考成本, 缩短了思考路径, 自然也提升了解决问题的效率我理解没有算法基础和有算法基础的程序员最大的区别不是寻求所谓的最优解, 而是在面对实际的工程和业务问题时, 不懂算法的人他的思考基础不是基于数据结构的, 而是基于语言逻辑, 举个例子 JS 中常用的就是数组和对象这两种数据结构, 如果你不懂算法, 自然也不会掌握基础的数据结构, 于是在编程和处理问题上都是以数组操作和对象操作来完成的, 你分解业务问题分解工程问题最终都会映射到 JS 的数组和对象上, 当问题复杂化的时候, 你缺乏更多的工具去应对, 这里的工具就是数据结构和算法, 最经典的就是个树形菜单, 光靠数组和对象, 写出来的代码肯定惨不忍睹呀, 同时在面对一些技术问题时你的思路也会受限, 因为你只知道数组和对象, 而具有算法基础的人, 他就会考虑使用树去解决问题, 算法减少了思考成本, 缩短了思考路径, 自然也提升了解决问题的效率我理解没有算法基础和有算法基础的程序员最大的区别不是寻求所谓的最优解, 而是在面对实际的工程和业务问题时, 不懂算法的人他的思考基础不是基于数据结构的, 而是基于语言逻辑, 举个例子 JS 中常用的就是数组和对象这两种数据结构, 如果你不懂算法, 自然也不会掌握基础的数据结构, 于是在编程和处理问题上都是以数组操作和对象操作来完成的, 你分"}}--[2020-06-13 11:39:16]
[warn]--{"name":"create_blog","desc":"someone is creating blog","data":{"uid":1,"title":"test","content":"我理解没有算法基础和有算法基础的程序员最大的区别不是寻求所谓的最优解, 而是在面对实际的工程和业务问题时, 不懂算法的人他的思考基础不是基于数据结构的"}}--[2020-06-13 11:44:42]
